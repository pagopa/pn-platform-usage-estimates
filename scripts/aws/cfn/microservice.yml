AWSTemplateFormatVersion: 2010-09-09
Description: 'Example microservice deploy'

Parameters:
  ProjectName:
    Type: String
    Description: 'Usually pn can be pnXYZ where XYZ are the feature number, useful to create
      experimental environments without crash official development environment'

  AlarmSNSTopicArn:
    Type: String
    Description: ARN of alarm topic

  WebApiDnsName:
    Type: String
    Description: 'The DNS name used for WEB rest API.'
  
  CorsAllowedDomains:
    Type: String
    Description: 'Comma separated list of domains allowed to make cross origin request'

  ContainerImageUri:
    Type: String
    Description: 'Exact container image URI with full repository and image digest'

  MicroserviceNumber:
    Type: Number
    Description: 'Disambiguation useful for load balancer rules'

  TemplateBucketBaseUrl:
    Type: String
    Description: 'The S3 bucket from which to fetch the templates used by this stack.'

  ECSClusterName:
    Type: String
    Description: 'The name of the ECS cluster where the microservice is going to be deployed'

  SubnetsIds:
    Type: String
    Description: 'subnets ids comma separated list. Where to deploy the microservice'

  VpcId:
    Type: String
    Description: 'VpcId where the microservice is going to be deployed'
  
  EcsDefaultSecurityGroup:
    Type: String
    Description: 'Default security group required by infrastructure'

  ApplicationLoadBalancerListenerArn:
    Type: String
    Description: 'Load balancer listener where HTTP endpoints is going to be registered'

  ApplicationLoadBalancerDomain:
    Type: String
    Description: 'Base URL of the load balancer where the service is going to be reachable'

  NetworkLoadBalancerLink:
    Type: String
    Description: 'network load balancer link for API-GW'
  
  LogsKinesisSourceStreamArn:
    Type: String
    Description: 'Kinesis stream that receive logs'
  
  Version:
    Type: String
    Description: 'keep track of used projects commitIds'

  EstimateDynamoTableName:
    Type: String
    Description: 'Name of dynamodb table containing request'

  EstimateDynamoTableArn:
    Type: String
    Description: 'ARN of dynamodb table containing request'

  PublicAdministrationDynamoTable:
    Type: String
    Description: 'Name of dynamodb table containing file request'

  PublicAdministrationDynamoTableArn:
    Type: String
    Description: 'ARN of dynamodb table containing file request'

  BillingDynamoTable:
    Type: String
    Description: 'Name of dynamodb table containing file request'

  BillingDynamoTableArn:
    Type: String
    Description: 'ARN of dynamodb table containing file request'

Resources:

  PlatformUsageEstimatesMicroservice:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${TemplateBucketBaseUrl}/fragments/ecs-service.yaml"
      Parameters:
        MicroServiceUniqueName: !Sub '${ProjectName}-platform-usage-path'
        CpuValue: 512
        MemoryAmount: 2GB
        AlarmSNSTopicArn: !Ref AlarmSNSTopicArn
        MappedPaths: '/template-ms-be/*'
        ECSClusterName: !Ref ECSClusterName
        Subnets: !Ref SubnetsIds
        VpcId: !Ref VpcId
        EcsDefaultSecurityGroup: !Ref EcsDefaultSecurityGroup
        LoadBalancerListenerArn: !Ref ApplicationLoadBalancerListenerArn
        LoadbalancerRulePriority: !Ref MicroserviceNumber
        CloudwatchLogKinesisStreamArn: !Ref LogsKinesisSourceStreamArn
        ContainerImageURI: !Sub '${ContainerImageUri}'
        ContainerEnvEntry1: !Sub 'AWS_REGIONCODE=${AWS::Region}'
        ContainerEnvEntry2: !Sub 'CORS_ALLOWED_DOMAINS=${CorsAllowedDomains}, http://localhost:3000'
        ContainerEnvEntry3: !Sub 'AWS_DYNAMODBESTIMATETABLE=${EstimateDynamoTableName}'
        ContainerEnvEntry4: !Sub 'AWS_DYNAMODBPUBLICADMINISTRATIONTABLE=${PublicAdministrationDynamoTable}'
        ContainerEnvEntry5: !Sub 'AWS_DYNAMODBBILLINGTABLE=${BillingDynamoTable}'
        ContainerEnvEntry6: !Sub 'PN_PLATFORMUSAGEESTIMATES_CLIENTEXTERNALREGISTRIESBASEPATH=http://${ApplicationLoadBalancerDomain}:8080'


  PlatformUsageEstimatesMicroserviceTaskPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:BatchGetItem
              - dynamodb:BatchWriteItem
              - dynamodb:ExecuteTransaction
              - dynamodb:GetItem
              - dynamodb:PutItem
              - dynamodb:DeleteItem
              - dynamodb:Query
              - dynamodb:TransactGetItems
              - dynamodb:TransactWriteItems
              - dynamodb:UpdateItem
            Resource:
              - !Sub "${EstimateDynamoTableArn}"
              - !Sub "${EstimateDynamoTableArn}/*"
              - !Sub "${PublicAdministrationDynamoTableArn}"
              - !Sub "${PublicAdministrationDynamoTableArn}/*"
              - !Sub "${BillingDynamoTableArn}"
              - !Sub "${BillingDynamoTableArn}/*"

  PlatformUsageEstimatesMicroserviceCloudWatchDashboard:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${TemplateBucketBaseUrl}/fragments/microservice-cloudwatch-dashboard.yaml"
      Parameters:
        DashboardName: !Sub "${ProjectName}-platform-usage-estimates"
        AlarmArns: !Join
          - ','
          - - !GetAtt PlatformUsageEstimatesMicroservice.Outputs.FatalLogsMetricAlarmArn

